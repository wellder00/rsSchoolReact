import Head from 'next/head';
import type { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import { wrapper } from '@/lib/redux';
import { getPokemon, getPokemons } from '@/lib/services/pokemonApi';
import Layout from './Layout';
import React from 'react';

export default function PageHome({
  pokemons,
  count,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <title>Pokemon</title>
      </Head>
      <Layout pokemons={pokemons} count={count} />
    </>
  );
}

export const getServerSideProps: GetServerSideProps = wrapper.getServerSideProps(
  (store) => async (context) => {
    try {
      const pokemon = typeof context.query.pokemon === 'string' ? context.query.pokemon : '';
      const limit = typeof context.query.limit === 'string' ? parseInt(context.query.limit) : 4;
      const offset = typeof context.query.offset === 'string' ? parseInt(context.query.offset) : 0;

      const data = await store.dispatch(getPokemons.initiate({ pokemon, limit, offset })).unwrap();
      let ids: string[] = [];

      if (data.results) {
        ids = data.results.map((data: { name: string; url: string }) => {
          const matchResult = data.url.match(/\/(\d+)\/$/);
          return matchResult ? matchResult[1] : '';
        });
      }

      const pokemons = ids
        ? await Promise.all(
            ids.map(async (id: string) => {
              const pokemon = await store.dispatch(getPokemon.initiate(id)).unwrap();
              return {
                id: pokemon.id,
                name: pokemon.name,
                weight: pokemon.weight,
                height: pokemon.height,
                sprites: pokemon.sprites.front_shiny,
              };
            })
          )
        : [];

      const pokemonSearch = data.name
        ? [
            {
              id: data.id,
              name: data.name,
              weight: data.weight,
              height: data.height,
              sprites: data.sprites.front_shiny,
            },
          ]
        : [];

      if (!data || !pokemonSearch) {
        return { notFound: true };
      }

      if (data.count) {
        return {
          props: {
            count: data.count,
            pokemons,
          },
        };
      } else
        return {
          props: {
            count: 0,
            pokemons: pokemonSearch,
          },
        };
    } catch (error) {
      return { props: { count: 0, pokemons: [] } };
    }
  }
);
